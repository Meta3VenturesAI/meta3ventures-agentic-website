import { describe, it, expect, beforeEach, vi } from 'vitest';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { VentureLaunchBuilder } from '../components/VentureLaunchBuilder';
import StrategicFundraisingAdvisor from '../components/StrategicFundraisingAdvisor';
import CompetitiveIntelligenceSystem from '../components/CompetitiveIntelligenceSystem';

// Mock the data storage service
vi.mock('../services/data-storage.service', () => ({
  dataStorage: {
    storeFormSubmission: vi.fn().mockResolvedValue(undefined),
    getAnalyticsSummary: vi.fn().mockResolvedValue({
      total_submissions: 10,
      by_type: { contact: 5, apply: 3, newsletter: 2 },
      unique_sessions: 8,
      recent_submissions: []
    })
  }
}));

// Mock the research agents service
vi.mock('../services/research-agents.service', () => ({
  researchAgentsService: {
    initializeAgents: vi.fn().mockResolvedValue(undefined),
    startResearchSession: vi.fn().mockResolvedValue(undefined),
    getAgentStatus: vi.fn().mockResolvedValue({ status: 'idle' })
  }
}));

describe('VentureLaunchBuilder', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('should render the component', () => {
    render(<VentureLaunchBuilder />);
    
    // Check for the main container
    const component = screen.getByRole('button', { name: /venture launch builder/i });
    expect(component).toBeInTheDocument();
  });

  it('should open when clicked', async () => {
    render(<VentureLaunchBuilder />);
    
    const button = screen.getByRole('button', { name: /venture launch builder/i });
    fireEvent.click(button);
    
    // Check if the chat interface opens
    await waitFor(() => {
      expect(screen.getByText(/start building your venture/i)).toBeInTheDocument();
    });
  });
});

describe('StrategicFundraisingAdvisor', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('should render the component', () => {
    render(<StrategicFundraisingAdvisor />);
    
    // Check for the main container
    const component = screen.getByRole('button', { name: /strategic fundraising advisor/i });
    expect(component).toBeInTheDocument();
  });

  it('should open when clicked', async () => {
    render(<StrategicFundraisingAdvisor />);
    
    const button = screen.getByRole('button', { name: /strategic fundraising advisor/i });
    fireEvent.click(button);
    
    // Check if the advisor interface opens
    await waitFor(() => {
      expect(screen.getByText(/fundraising strategy/i)).toBeInTheDocument();
    });
  });
});

describe('CompetitiveIntelligenceSystem', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('should render the component', () => {
    render(<CompetitiveIntelligenceSystem />);
    
    // Check for the main container
    const component = screen.getByRole('button', { name: /competitive intelligence system/i });
    expect(component).toBeInTheDocument();
  });

  it('should open when clicked', async () => {
    render(<CompetitiveIntelligenceSystem />);
    
    const button = screen.getByRole('button', { name: /competitive intelligence system/i });
    fireEvent.click(button);
    
    // Check if the research interface opens
    await waitFor(() => {
      expect(screen.getByText(/competitive intelligence/i)).toBeInTheDocument();
    });
  });
});

describe('AI Advisors Integration', () => {
  it('should render all components together', () => {
    render(
      <div>
        <VentureLaunchBuilder />
        <StrategicFundraisingAdvisor />
        <CompetitiveIntelligenceSystem />
      </div>
    );
    
    expect(screen.getByRole('button', { name: /venture launch builder/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /strategic fundraising advisor/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /competitive intelligence system/i })).toBeInTheDocument();
  });
});